{
  "stats": {
    "suites": 3,
    "tests": 12,
    "passes": 12,
    "pending": 0,
    "failures": 0,
    "start": "2021-02-25T16:09:37.471Z",
    "end": "2021-02-25T16:09:37.626Z",
    "duration": 155,
    "testsRegistered": 12,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "success",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "uuid": "b51141d9-4b37-411e-b958-eb5db56a34b7",
    "title": "",
    "fullFile": "",
    "file": "",
    "beforeHooks": [],
    "afterHooks": [],
    "tests": [],
    "suites": [
      {
        "uuid": "69edad2b-25e3-4bfd-b651-b7cacdb469b2",
        "title": "/GET ping service",
        "fullFile": "D:\\myWork\\NodeJs-Projects\\eapi-updatecustomer-rest\\test\\unit\\test.js",
        "file": "\\test\\unit\\test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "it should GET ping status message",
            "fullTitle": "/GET ping service it should GET ping status message",
            "timedOut": false,
            "duration": 35,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "chai\n  .request(url)\n  .get('/v1/pharmacy/patient/ping')\n  .end((err, res) => {\n    res.should.have.status(200);\n    res.body.status.should.equal('ok');\n    res.body.apiname.should.equal('eapi-updatecustomer-rest');\n    res.body.apiversion.should.equal('v1_0_0');\n    done();\n  });",
            "err": {},
            "isRoot": false,
            "uuid": "c35f05f2-1cd9-49c0-bcc0-45f3e992f6b6",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "it should not GET ping status message",
            "fullTitle": "/GET ping service it should not GET ping status message",
            "timedOut": false,
            "duration": 7,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "chai\n  .request(url)\n  .post('/v1/pharmacy/patient/ping')\n  .end((err, res) => {\n    res.should.have.status(405);\n    res.body.messages[0].should.have.property('type').eq('ERROR');\n    res.body.messages[0].should.have\n      .property('code')\n      .eq('WAG_E_INVALID_METHOD_1001');\n    done();\n  });",
            "err": {},
            "isRoot": false,
            "uuid": "3bf79604-e7e3-4784-9390-dcb0fb945484",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "c35f05f2-1cd9-49c0-bcc0-45f3e992f6b6",
          "3bf79604-e7e3-4784-9390-dcb0fb945484"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 42,
        "root": false,
        "rootEmpty": false,
        "_timeout": 10000
      },
      {
        "uuid": "3ff3e7fc-eaed-4f59-88c6-a117994f38a1",
        "title": "Test Info/Debug/Error Message Logging",
        "fullFile": "D:\\myWork\\NodeJs-Projects\\eapi-updatecustomer-rest\\test\\unit\\test.js",
        "file": "\\test\\unit\\test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "it should log info message",
            "fullTitle": "Test Info/Debug/Error Message Logging it should log info message",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "logging.logInfo(\n  'SampleAplicationName',\n  101,\n  1001,\n  1,\n  'GET',\n  '200',\n  'Success',\n  'TestInfoLog',\n  '100ms',\n  null,\n  null\n);\ndone();",
            "err": {},
            "isRoot": false,
            "uuid": "8de24617-ed6c-4676-beab-f9169e9cc5d5",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "it should log info message",
            "fullTitle": "Test Info/Debug/Error Message Logging it should log info message",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "logging.logInfo(\n  null,\n  102,\n  1002,\n  1,\n  'GET',\n  '200',\n  'Success',\n  'TestInfoLog',\n  '100ms',\n  null,\n  null\n);\ndone();",
            "err": {},
            "isRoot": false,
            "uuid": "7f155325-fa23-4fcd-ba29-e800601c0b52",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "it should log Debug message",
            "fullTitle": "Test Info/Debug/Error Message Logging it should log Debug message",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "logging.logDebug(\n  'SampleAplicationName',\n  103,\n  1003,\n  2,\n  'GET',\n  '200',\n  'Success',\n  'TestDebugLog',\n  '150ms',\n  null,\n  null\n);\ndone();",
            "err": {},
            "isRoot": false,
            "uuid": "3c4b584e-afb9-4f75-b53f-1a65ee1ef2d0",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "it should log Debug message",
            "fullTitle": "Test Info/Debug/Error Message Logging it should log Debug message",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "logging.logDebug(\n  null,\n  104,\n  1004,\n  2,\n  'GET',\n  '200',\n  'Success',\n  'TestDebugLog',\n  '150ms',\n  null,\n  null\n);\ndone();",
            "err": {},
            "isRoot": false,
            "uuid": "ab3bd0f7-4a6e-4565-a461-959da99d5904",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "it should log error message",
            "fullTitle": "Test Info/Debug/Error Message Logging it should log error message",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "let error = new Error('Internal Error');\nlogging.logError(\n  'SampleAplicationName',\n  105,\n  1005,\n  3,\n  'GET',\n  '500',\n  'Failure',\n  'Error Occured %s',\n  '50ms',\n  'KFK-ERR-001',\n  'Error accessing input topic',\n  error\n);\ndone();",
            "err": {},
            "isRoot": false,
            "uuid": "89663550-a2e8-4a80-877a-4c9865f1cee2",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "it should log error message",
            "fullTitle": "Test Info/Debug/Error Message Logging it should log error message",
            "timedOut": false,
            "duration": 2,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "let error = new Error('Internal Error');\nlogging.logError(\n  null,\n  106,\n  1006,\n  3,\n  'GET',\n  '500',\n  'Failure',\n  'Error Occured %s',\n  '50ms',\n  'KFK-ERR-001',\n  'Error accessing input topic',\n  error\n);\ndone();",
            "err": {},
            "isRoot": false,
            "uuid": "7af14eff-f0ec-4ce3-894d-a6e2f62dac6a",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "8de24617-ed6c-4676-beab-f9169e9cc5d5",
          "7f155325-fa23-4fcd-ba29-e800601c0b52",
          "3c4b584e-afb9-4f75-b53f-1a65ee1ef2d0",
          "ab3bd0f7-4a6e-4565-a461-959da99d5904",
          "89663550-a2e8-4a80-877a-4c9865f1cee2",
          "7af14eff-f0ec-4ce3-894d-a6e2f62dac6a"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 2,
        "root": false,
        "rootEmpty": false,
        "_timeout": 10000
      },
      {
        "uuid": "61e7b1e7-ffac-404f-b8fd-28335b1e20b3",
        "title": "POST /update",
        "fullFile": "D:\\myWork\\NodeJs-Projects\\eapi-updatecustomer-rest\\test\\unit\\test.js",
        "file": "\\test\\unit\\test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "With valid inputs params",
            "fullTitle": "POST /update With valid inputs params",
            "timedOut": false,
            "duration": 38,
            "state": "passed",
            "speed": "medium",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "chai\n  .request(server)\n  .post('/v1/pharmacy/patient/update')\n  .set('Authorization', '001')\n  .send({\n    patientId: '58519001003',\n    email: 'nŮźDåŷ:ė',\n    dob: 'mm/dd/yyyy, 08/25/1909',\n    phoneNumberAreaCode: 'nŮźDåŷ:ė',\n    phoneNumber: 'nŮźDåŷ:ė',\n    preferredStoreNumber: 0,\n    lastFilledStoreNumber: 'string',\n    preferredPaymentMethod: 'string',\n    previousFilledLastMile: 'string',\n    customerShippingAddress: {\n      addressLine1: 'nŮźDåŷ:ė',\n      city: 'nŮźDåŷ:ė',\n      zipCode: 'Encrypted - string FPE',\n      state: 'string'\n    },\n    profilePaymentDetails: [\n      {\n        cardType: 'string',\n        creditCard: 'string',\n        lastFourDigits: 0,\n        expiryMonth: 0,\n        expiryYear: 0,\n        zipCode: 'string',\n        isDefault: true\n      }\n    ]\n  })\n  .end((err, res) => {\n    res.should.have.status(200);\n    res.body.message[0].should.have.property('type').eq('SUCCESS');\n    res.body.should.be.an('object');\n    done();\n  });",
            "err": {},
            "isRoot": false,
            "uuid": "38af0059-9d08-4404-95d1-e672d27a32af",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "With invalid authorization",
            "fullTitle": "POST /update With invalid authorization",
            "timedOut": false,
            "duration": 7,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "chai\n  .request(server)\n  .post('/v1/pharmacy/patient/update')\n  .send({\n    patientId: '58519001003',\n    email: 'nŮźDåŷ:ė',\n    dob: 'mm/dd/yyyy, 08/25/1909',\n    phoneNumberAreaCode: 'nŮźDåŷ:ė',\n    phoneNumber: 'nŮźDåŷ:ė',\n    preferredStoreNumber: 0,\n    lastFilledStoreNumber: 'string',\n    preferredPaymentMethod: 'string',\n    previousFilledLastMile: 'string',\n    customerShippingAddress: {\n      addressLine1: 'nŮźDåŷ:ė',\n      city: 'nŮźDåŷ:ė',\n      zipCode: 'Encrypted - string FPE',\n      state: 'string'\n    },\n    profilePaymentDetails: [\n      {\n        cardType: 'string',\n        creditCard: 'string',\n        lastFourDigits: 0,\n        expiryMonth: 0,\n        expiryYear: 0,\n        zipCode: 'string',\n        isDefault: true\n      }\n    ]\n  })\n  .end((err, res) => {\n    res.should.have.status(401);\n    res.body.messages[0].should.have.property('type').eq('ERROR');\n    res.body.should.be.an('object');\n    res.body.messages[0].should.have\n      .property('code')\n      .eq('WAG_E_UNAUTHORIZED_REQUEST_1001');\n    done();\n  });",
            "err": {},
            "isRoot": false,
            "uuid": "1fe60c8a-88fc-4a49-bfb7-e8f4797513e5",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "With empty patient ID ",
            "fullTitle": "POST /update With empty patient ID ",
            "timedOut": false,
            "duration": 10,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "chai\n  .request(server)\n  .post('/v1/pharmacy/patient/update')\n  .set('Authorization', '001')\n  .send({\n    patientId: '',\n    email: 'nŮźDåŷ:ė',\n    dob: 'mm/dd/yyyy, 08/25/1909',\n    phoneNumberAreaCode: 'nŮźDåŷ:ė',\n    phoneNumber: 'nŮźDåŷ:ė',\n    preferredStoreNumber: 0,\n    lastFilledStoreNumber: 'string',\n    preferredPaymentMethod: 'string',\n    previousFilledLastMile: 'string',\n    customerShippingAddress: {\n      addressLine1: 'nŮźDåŷ:ė',\n      city: 'nŮźDåŷ:ė',\n      zipCode: 'Encrypted - string FPE',\n      state: 'string'\n    },\n    profilePaymentDetails: [\n      {\n        cardType: 'string',\n        creditCard: 'string',\n        lastFourDigits: 0,\n        expiryMonth: 0,\n        expiryYear: 0,\n        zipCode: 'string',\n        isDefault: true\n      }\n    ]\n  })\n  .end((err, res) => {\n    res.should.have.status(400);\n    res.body.messages[0].should.have.property('type').eq('ERROR');\n    res.body.messages[0].should.have\n      .property('code')\n      .eq('WAG_E_INVALID_REQUEST_1001');\n    res.body.should.be.an('object');\n    done();\n  });",
            "err": {},
            "isRoot": false,
            "uuid": "ffe1591a-1ec6-4967-8fa2-7d3a6a9b5ddb",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "With wrong request ",
            "fullTitle": "POST /update With wrong request ",
            "timedOut": false,
            "duration": 5,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "chai\n  .request(server)\n  .get('/v1/pharmacy/patient/update')\n  .set('Authorization', '001')\n  .send({\n    patientId: '123456',\n    email: 'nŮźDåŷ:ė',\n    dob: 'mm/dd/yyyy, 08/25/1909',\n    phoneNumberAreaCode: 'nŮźDåŷ:ė',\n    phoneNumber: 'nŮźDåŷ:ė',\n    preferredStoreNumber: 0,\n    lastFilledStoreNumber: 'string',\n    preferredPaymentMethod: 'string',\n    previousFilledLastMile: 'string',\n    customerShippingAddress: {\n      addressLine1: 'nŮźDåŷ:ė',\n      city: 'nŮźDåŷ:ė',\n      zipCode: 'Encrypted - string FPE',\n      state: 'string'\n    },\n    profilePaymentDetails: [\n      {\n        cardType: 'string',\n        creditCard: 'string',\n        lastFourDigits: 0,\n        expiryMonth: 0,\n        expiryYear: 0,\n        zipCode: 'string',\n        isDefault: true\n      }\n    ]\n  })\n  .end((err, res) => {\n    res.should.have.status(405);\n    res.body.messages[0].should.have.property('type').eq('ERROR');\n    res.body.messages[0].should.have\n      .property('code')\n      .eq('WAG_E_INVALID_METHOD_1001');\n    res.body.should.be.an('object');\n    done();\n  });",
            "err": {},
            "isRoot": false,
            "uuid": "8c1e8ede-dd48-4f04-ba70-268a119b6fc2",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "38af0059-9d08-4404-95d1-e672d27a32af",
          "1fe60c8a-88fc-4a49-bfb7-e8f4797513e5",
          "ffe1591a-1ec6-4967-8fa2-7d3a6a9b5ddb",
          "8c1e8ede-dd48-4f04-ba70-268a119b6fc2"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 60,
        "root": false,
        "rootEmpty": false,
        "_timeout": 10000
      }
    ],
    "passes": [],
    "failures": [],
    "pending": [],
    "skipped": [],
    "duration": 0,
    "root": true,
    "rootEmpty": true,
    "_timeout": 10000
  },
  "copyrightYear": 2021
}