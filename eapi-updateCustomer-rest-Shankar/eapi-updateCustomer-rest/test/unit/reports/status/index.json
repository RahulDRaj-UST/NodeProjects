{
  "stats": {
    "suites": 3,
    "tests": 13,
    "passes": 13,
    "pending": 0,
    "failures": 0,
    "start": "2021-03-03T06:44:51.523Z",
    "end": "2021-03-03T06:44:51.721Z",
    "duration": 198,
    "testsRegistered": 13,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "success",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "uuid": "755aae71-40da-4ade-83ec-0684da74073c",
    "title": "",
    "fullFile": "",
    "file": "",
    "beforeHooks": [],
    "afterHooks": [],
    "tests": [],
    "suites": [
      {
        "uuid": "802c8723-bc51-48f7-ad53-026de7cf45a0",
        "title": "/GET ping service",
        "fullFile": "C:\\NodeJs-projects\\Task\\eapi-updateCustomer-rest\\test\\unit\\test.js",
        "file": "\\test\\unit\\test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "it should GET ping status message",
            "fullTitle": "/GET ping service it should GET ping status message",
            "timedOut": false,
            "duration": 49,
            "state": "passed",
            "speed": "medium",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "chai.request(url)\n\t.get('/v1/pharmacy/patient/ping')\n\t.end((err, res) => {\n\t\tres.should.have.status(200);\n\t\tres.body.status.should.equal('ok');\n\t\tres.body.apiname.should.equal('eapi-customer-rest');\n\t\tres.body.apiversion.should.equal('v1_0_0');\n\t\tdone();\n\t});",
            "err": {},
            "isRoot": false,
            "uuid": "7c785d06-d754-4222-8c90-595eb684343b",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "7c785d06-d754-4222-8c90-595eb684343b"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 49,
        "root": false,
        "rootEmpty": false,
        "_timeout": 10000
      },
      {
        "uuid": "9414a577-e202-4502-b767-1303b16d06da",
        "title": "Test Info/Debug/Error Message Logging",
        "fullFile": "C:\\NodeJs-projects\\Task\\eapi-updateCustomer-rest\\test\\unit\\test.js",
        "file": "\\test\\unit\\test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "it should log info message",
            "fullTitle": "Test Info/Debug/Error Message Logging it should log info message",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "logging.logInfo(\"SampleAplicationName\",101,1001,1,\"GET\",\"200\",\"Success\",\"TestInfoLog\",\"100ms\",null,null);\ndone();",
            "err": {},
            "isRoot": false,
            "uuid": "1f562f2a-edf2-40ab-952c-3011dfb933a2",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "it should log info message",
            "fullTitle": "Test Info/Debug/Error Message Logging it should log info message",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "logging.logInfo(null,102,1002,1,\"GET\",\"200\",\"Success\",\"TestInfoLog\",\"100ms\",null,null);\ndone();",
            "err": {},
            "isRoot": false,
            "uuid": "93d2207d-5add-40ed-9a51-086dce95b53b",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "it should log Debug message",
            "fullTitle": "Test Info/Debug/Error Message Logging it should log Debug message",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "logging.logDebug(\"SampleAplicationName\",103,1003,2,\"GET\",\"200\",\"Success\",\"TestDebugLog\",\"150ms\",null,null);\ndone();",
            "err": {},
            "isRoot": false,
            "uuid": "8ebcaf4c-8d81-49a9-acab-4b1a64b92f8c",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "it should log Debug message",
            "fullTitle": "Test Info/Debug/Error Message Logging it should log Debug message",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "logging.logDebug(null,104,1004,2,\"GET\",\"200\",\"Success\",\"TestDebugLog\",\"150ms\",null,null);\ndone();",
            "err": {},
            "isRoot": false,
            "uuid": "4858f1e9-5169-4674-836f-170cbd6c48e7",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "it should log error message",
            "fullTitle": "Test Info/Debug/Error Message Logging it should log error message",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "let error = new Error(\"Internal Error\")\nlogging.logError(\"SampleAplicationName\",105,1005,3,\"GET\",\"500\",\"Failure\",\"Error Occured %s\", \"50ms\",\"KFK-ERR-001\",\"Error accessing input topic\",error);\ndone();",
            "err": {},
            "isRoot": false,
            "uuid": "8197aba7-84cd-434c-a9fe-63dad2dd434a",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "it should log error message",
            "fullTitle": "Test Info/Debug/Error Message Logging it should log error message",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "let error = new Error(\"Internal Error\")\nlogging.logError(null,106,1006,3,\"GET\",\"500\",\"Failure\",\"Error Occured %s\", \"50ms\",\"KFK-ERR-001\",\"Error accessing input topic\",error);\ndone();",
            "err": {},
            "isRoot": false,
            "uuid": "e89089cb-89e3-42ec-a6a6-9f70590ae7b0",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "1f562f2a-edf2-40ab-952c-3011dfb933a2",
          "93d2207d-5add-40ed-9a51-086dce95b53b",
          "8ebcaf4c-8d81-49a9-acab-4b1a64b92f8c",
          "4858f1e9-5169-4674-836f-170cbd6c48e7",
          "8197aba7-84cd-434c-a9fe-63dad2dd434a",
          "e89089cb-89e3-42ec-a6a6-9f70590ae7b0"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 5,
        "root": false,
        "rootEmpty": false,
        "_timeout": 10000
      },
      {
        "uuid": "455d2ea9-e233-472c-8754-a739bd51f8f8",
        "title": "POST /v1/pharmacy/patient/",
        "fullFile": "C:\\NodeJs-projects\\Task\\eapi-updateCustomer-rest\\test\\unit\\test.js",
        "file": "\\test\\unit\\test.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: Set up a fake HTTP Server",
            "fullTitle": "POST /v1/pharmacy/patient/ \"before all\" hook: Set up a fake HTTP Server",
            "timedOut": false,
            "duration": 1,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "nock(url)\n\t.post('/v1/pharmacy/patient/update')\n\t.reply(503, patientResponse503);",
            "err": {},
            "isRoot": false,
            "uuid": "e1901ebb-774a-43e3-9b94-931a9e9daa6e",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before all\" hook: Set up a fake HTTP Server",
            "fullTitle": "POST /v1/pharmacy/patient/ \"before all\" hook: Set up a fake HTTP Server",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "nock(url)\n\t.post('/v1/pharmacy/patient/update')\n\t.reply(500, patientResponse500);",
            "err": {},
            "isRoot": false,
            "uuid": "7b7b5d2a-8e99-42dc-9d90-b3bc2f37464b",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "tests": [
          {
            "title": "it should send patient info to kafka",
            "fullTitle": "POST /v1/pharmacy/patient/ it should send patient info to kafka",
            "timedOut": false,
            "duration": 49,
            "state": "passed",
            "speed": "medium",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "chai.request(server)\n\t\t.post(\"/v1/pharmacy/patient/update\")\n\t\t.send(patientTestDoc)\n\t\t.set(\"Authorization\",\"001\")\n\t\t.end((err,response)=>{\n\t\t\t\n\t\t\tresponse.should.have.status(200);\n\t\t\tresponse.body.should.be.a('object');\n\t\t\tresponse.body.messages[0].should.have.property('code').eq('WAG_E_OK');\n\t\t\tresponse.body.messages[0].should.have.property('type').eq('SUCCESS');\n\t\t\tdone();\n\t\t});",
            "err": {},
            "isRoot": false,
            "uuid": "c7b95333-b8b4-41b0-a679-453b3b9b0058",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "it should return 400 when request have missing patientId",
            "fullTitle": "POST /v1/pharmacy/patient/ it should return 400 when request have missing patientId",
            "timedOut": false,
            "duration": 11,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "chai.request(server)\n\t\t.post(\"/v1/pharmacy/patient/update\")\n\t\t.set(\"Authorization\",\"001\")\n\t\t.end((err,response)=>{\n\t\t\tresponse.should.have.status(400);\n\t\t\tresponse.body.should.be.a('object');\n\t\t\tresponse.body.should.have.property('messages');\n\t\t\tresponse.body.messages[0].should.have.property('code').eq('WAG_E_INVALID_REQUEST_1001');\n\t\t\tresponse.body.messages[0].should.have.property('type').eq('ERROR');\n\t\t\tdone();\n\t\t});",
            "err": {},
            "isRoot": false,
            "uuid": "af451f1a-de54-4f6b-b7ea-7dfd0569e5c8",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "it should return 405 when invalid method call",
            "fullTitle": "POST /v1/pharmacy/patient/ it should return 405 when invalid method call",
            "timedOut": false,
            "duration": 7,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "chai.request(server)\n\t\t.get(\"/v1/pharmacy/patient/update\")\n\t\t.send(patientTestDoc)\n\t\t.set(\"Authorization\",\"001\")\n\t\t.end((err,response)=>{\n\t\t\tresponse.should.have.status(405);\n\t\t\tresponse.body.should.be.a('object');\n\t\t\tresponse.body.should.have.property('messages');\n\t\t\tresponse.body.messages[0].should.have.property('code').eq('WAG_E_INVALID_METHOD_1001');\n\t\t\tresponse.body.messages[0].should.have.property('type').eq('ERROR');\n\t\t\tdone();\n\t\t});",
            "err": {},
            "isRoot": false,
            "uuid": "97aac94d-60f5-4334-9a48-c11ff4b049e6",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "it should return 401 if not authenticated",
            "fullTitle": "POST /v1/pharmacy/patient/ it should return 401 if not authenticated",
            "timedOut": false,
            "duration": 9,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "chai.request(server)\n\t\t.post(\"/v1/pharmacy/patient/update\")\n\t\t.send(patientTestDoc)\n\t\t.end((err,response)=>{\n\t\t\tresponse.should.have.status(401);\n\t\t\tresponse.body.should.be.a('object');\n\t\t\tresponse.body.should.have.property('messages');\n\t\t\tresponse.body.messages[0].should.have.property('code').eq('WAG_E_UNAUTHORIZED_REQUEST_1001');\n\t\t\tresponse.body.messages[0].should.have.property('type').eq('ERROR');\n\t\t\tdone();\n\t\t});",
            "err": {},
            "isRoot": false,
            "uuid": "307aea90-09bf-46db-a124-d5adc80663ce",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "it should return 503 when apache kafka is not responding",
            "fullTitle": "POST /v1/pharmacy/patient/ it should return 503 when apache kafka is not responding",
            "timedOut": false,
            "duration": 6,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "chai.request(url)\n\t\t\t.post(\"/v1/pharmacy/patient/update\")\n\t\t\t.set(\"Authorization\", \"001\")\n\t\t\t.send(patientTestDoc)\n\t\t\t.end((err, response) => {\n\t\t\t\tresponse.should.have.status(503);\n\t\t\t\tresponse.body.should.be.a('object');\n\t\t\t\tresponse.body.should.have.property('messages');\n\t\t\t\tresponse.body.messages[0].should.have.property('code').eq('WAG_E_INVALID_METHOD_1001');\n\t\t\t\tresponse.body.messages[0].should.have.property('type').eq('ERROR');\n\t\t\t\tdone();\n\t\t\t});",
            "err": {},
            "isRoot": false,
            "uuid": "8567d983-04a9-4d02-b4c2-2183abdf0d22",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "it should return 500 when internal server error occured",
            "fullTitle": "POST /v1/pharmacy/patient/ it should return 500 when internal server error occured",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "chai.request(url)\n\t\t\t.post(\"/v1/pharmacy/patient/update\")\n\t\t\t.set(\"Authorization\", \"001\")\n\t\t\t.send(patientTestDoc)\n\t\t\t.end((err, response) => {\n\t\t\t\tresponse.should.have.status(500);\n\t\t\t\tresponse.body.should.be.a('object');\n\t\t\t\tresponse.body.should.have.property('messages');\n\t\t\t\tresponse.body.messages[0].should.have.property('code').eq('WAG_E_SVC_ERROR_1000');\n\t\t\t\tresponse.body.messages[0].should.have.property('type').eq('ERROR');\n\t\t\t\tdone();\n\t\t\t});",
            "err": {},
            "isRoot": false,
            "uuid": "6e122c00-c4f4-4492-8cb2-302f2cca384a",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "c7b95333-b8b4-41b0-a679-453b3b9b0058",
          "af451f1a-de54-4f6b-b7ea-7dfd0569e5c8",
          "97aac94d-60f5-4334-9a48-c11ff4b049e6",
          "307aea90-09bf-46db-a124-d5adc80663ce",
          "8567d983-04a9-4d02-b4c2-2183abdf0d22",
          "6e122c00-c4f4-4492-8cb2-302f2cca384a"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 83,
        "root": false,
        "rootEmpty": false,
        "_timeout": 10000
      }
    ],
    "passes": [],
    "failures": [],
    "pending": [],
    "skipped": [],
    "duration": 0,
    "root": true,
    "rootEmpty": true,
    "_timeout": 10000
  },
  "copyrightYear": 2021
}